/**
 * ÌîÑÎ°úÎ™®ÏÖò ÏÑúÎπÑÏä§ (TypeScript version)
 * ÌîÑÎ°úÎ™®ÏÖò Í¥ÄÎ†® ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ
 */

import { Product } from '@/advanced/features/cart/utils/stockUtils.ts';
import { applyFlashSale, applySuggestSale } from './promotionPriceService.ts';
import { BUSINESS_CONSTANTS } from '@/advanced/shared/constants/business.ts';

interface PromotionCallbacks {
  onFlashSale: (product: Product) => void;
  onSuggestSale: (product: Product) => void;
  updateProductList: () => void;
}

/**
 * ÎûúÎç§ ÏßÄÏó∞ ÏãúÍ∞Ñ ÏÉùÏÑ± (ÏàúÏàò Ìï®Ïàò)
 */
const generateRandomDelay = (maxDelay: number): number => {
  return Math.random() * maxDelay;
};

/**
 * ÎûúÎç§ ÏÉÅÌíà ÏÑ†ÌÉù (ÏàúÏàò Ìï®Ïàò)
 */
const selectRandomProduct = (products: Product[]): Product => {
  const luckyIdx = Math.floor(Math.random() * products.length);
  return products[luckyIdx];
};

/**
 * Ï∂îÏ≤ú ÏÉÅÌíà Ï∞æÍ∏∞ (ÏàúÏàò Ìï®Ïàò)
 */
const findRecommendation = (
  products: Product[],
  lastSelectedId: string | null,
): Product | null => {
  return (
    products.find(
      product =>
        product.id !== lastSelectedId && product.q > 0 && !product.suggestSale,
    ) || null
  );
};

/**
 * Î≤àÍ∞úÏÑ∏Ïùº ÏïåÎ¶º ÌëúÏãú
 */
const showFlashSaleAlert = (product: Product, discountRate: number): void => {
  const discountPercent = discountRate * 100;
  alert(`‚ö°Î≤àÍ∞úÏÑ∏Ïùº! ${product.name}Ïù¥(Í∞Ä) ${discountPercent}% Ìï†Ïù∏ Ï§ëÏûÖÎãàÎã§!`);
};

/**
 * Ï∂îÏ≤úÏÑ∏Ïùº ÏïåÎ¶º ÌëúÏãú
 */
const showRecommendationAlert = (
  product: Product,
  discountRate: number,
): void => {
  const discountPercent = discountRate * 100;
  alert(
    `üíù ${product.name}ÏùÄ(Îäî) Ïñ¥Îñ†ÏÑ∏Ïöî? ÏßÄÍ∏à Íµ¨Îß§ÌïòÏãúÎ©¥ ${discountPercent}% Ï∂îÍ∞Ä Ìï†Ïù∏!`,
  );
};

/**
 * Î≤àÍ≤åÏÑ∏Ïùº ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
 */
export const setupFlashSaleTimer = (
  getProducts: () => Product[],
  callbacks: PromotionCallbacks,
): void => {
  const lightningDelay = generateRandomDelay(
    BUSINESS_CONSTANTS.TIMERS.RANDOM_DELAY,
  );

  setTimeout(() => {
    setInterval(() => {
      const products = getProducts();
      const luckyItem = selectRandomProduct(products);

      // Î≤àÍ∞úÏÑ∏Ïùº Ï†ÅÏö©
      const saleApplied = applyFlashSale(
        luckyItem.id,
        BUSINESS_CONSTANTS.DISCOUNT.FLASH_SALE_DISCOUNT_RATE,
        products,
      );

      if (saleApplied) {
        showFlashSaleAlert(
          luckyItem,
          BUSINESS_CONSTANTS.DISCOUNT.FLASH_SALE_DISCOUNT_RATE,
        );
        callbacks.onFlashSale(luckyItem);
        callbacks.updateProductList();
      }
    }, BUSINESS_CONSTANTS.TIMERS.FLASH_SALE_INTERVAL);
  }, lightningDelay);
};

/**
 * Ï∂îÏ≤úÏÑ∏Ïùº ÌÉÄÏù¥Î®∏ ÏÑ§Ï†ï
 */
export const setupRecommendationTimer = (
  getProducts: () => Product[],
  getLastSelected: () => string | null,
  getCartItemCount: () => number,
  callbacks: PromotionCallbacks,
): void => {
  const initialDelay = generateRandomDelay(BUSINESS_CONSTANTS.TIMERS.MAX_DELAY);

  setTimeout(() => {
    setInterval(() => {
      // Ïû•Î∞îÍµ¨ÎãàÍ∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ Ìå®Ïä§
      if (getCartItemCount() === 0) {
        return;
      }

      const lastSelectedProduct = getLastSelected();
      if (!lastSelectedProduct) return;

      const products = getProducts();
      const suggest = findRecommendation(products, lastSelectedProduct);

      if (suggest) {
        // Ï∂îÏ≤úÏÑ∏Ïùº Ï†ÅÏö©
        const saleApplied = applySuggestSale(
          suggest.id,
          BUSINESS_CONSTANTS.DISCOUNT.SUGGEST_DISCOUNT_RATE,
          products,
        );

        if (saleApplied) {
          showRecommendationAlert(
            suggest,
            BUSINESS_CONSTANTS.DISCOUNT.SUGGEST_DISCOUNT_RATE,
          );
          callbacks.onSuggestSale(suggest);
          callbacks.updateProductList();
        }
      }
    }, BUSINESS_CONSTANTS.TIMERS.SUGGEST_SALE_INTERVAL);
  }, initialDelay);
};
